struct SparsTable {
    static const int N = 200000;
    static const int logN = 20;
    int firstOne[N + 5];
    int Table[N + 5][logN];

    int Oper(int a, int b)
    {
        return a & b;
    }
    int neutral = (1LL << 60LL) - 1;

    SparsTable()
    {
        int cur_bit = 0;
        for (int i = 0; i < N + 5; i++)
        {
            if (i == (1 << cur_bit))
            {
                cur_bit++;
            }
            firstOne[i] = cur_bit;
        }
    }

    void build(const vector<int>& A)
    {
        int n = A.size();
        int bit = 0;
        while (n >= (1 << bit))
        {
            bit++;
        }

        for (int i = 0; i < n; i++)
        {
            Table[i][0] = A[i];
        }
        int cur_bit = 1;
        while (cur_bit < bit)
        {
            for (int i = 0; i < n; i++)
            {
                Table[i][cur_bit] = Oper(Table[i][cur_bit - 1], (
                    i + (1 << (cur_bit - 1)) < n ? Table[i + (1 << (cur_bit - 1))][cur_bit - 1] : neutral));
            }
            ++cur_bit;
        }
    }

    // [l; r)
    int get(int l, int r)
    {
        int st = firstOne[r - l] - 1;
        return Oper(Table[l][st], Table[r - (1LL << st)][st]);
    }
};
