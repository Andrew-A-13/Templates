struct SegTree {
    struct field {
        int Min = LLONG_MAX;
        int C = 0;
        field() {}
        field(int d)
        {
            Min = d; C = 1;
        }
    };
    static const int N = 100000;
    field Tree[4 * N];
    int st;

    field neutral = field();

    field Oper(field a, field b)
    {
        field res; res.Min = min(a.Min, b.Min);
        if (a.Min == res.Min)
        {
            res.C += a.C;
        }
        if (b.Min == res.Min)
        {
            res.C += b.C;
        }
        return res;
    }

    void reset(int n)
    {
        for (int i = 0; i < min(4 * n + 3, 4 * N); i++)
        {
            Tree[i] = field();
        }
        st = 0;
        while ((1 << st) < n)
        {
            st++;
        }
    }

    void build(const vector<int>& A)
    {
        int cur_st = st - 1;
        for (int i = (1 << st); i < (1 << st) + A.size(); i++)
        {
            Tree[i] = field(A[i - (1 << st)]);
        }
        while (cur_st >= 0)
        {
            for (int i = (1 << cur_st); i < 2 * (1 << cur_st); i++)
            {
                Tree[i] = Oper(Tree[2 * i], Tree[2 * i + 1]);
            }
            cur_st--;
        }
    }

    void reset_and_build(const vector<int>& A)
    {
        reset(A.size());
        build(A);
    }

    

    void upd(int index, int x)
    {
        Upd(index + (1 << st), x);
    }

    //  [l;r)
    field get(int l, int r)
    {
        return get(l + (1 << st), r + (1 << st), 1, 0);
    }

private:

    void Upd(int index, int x)
    {
        if (index == 0)
            return;
        if (index >= (1 << st))
        {
            Tree[index] = field(x);
            Upd(index / 2, x);
            return;
        }
        Tree[index] = Oper(Tree[2 * index], Tree[2 * index + 1]);
        if (index != 1)
        {
            Upd(index / 2, x);
        }
    }

    field get(int l, int r, int index, int cur_st)
    {
        int L = index * (1 << (st - cur_st));
        int R = L + (1 << (st - cur_st));
        if ((R <= l) || (L >= r))
        {
            return neutral;
        }
        if ((l <= L) && (R <= r))
            return Tree[index];
        return Oper(get(l, r, index * 2, cur_st + 1), get(l, r, index * 2 + 1, cur_st + 1));
    }

};
