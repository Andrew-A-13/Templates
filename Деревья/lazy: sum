struct TREE {
    struct field {
        field() {
            sum = lazy = 0;
        }
        int sum = 0;
        int lazy = 0;
    };
    static const int N = 100000;
    field Tree[4 * N];
    int st = 0;

    // [L ; R)
    void upd(int L, int R, int S, int index = 1, int cur_st = 0)
    {
        int LL = index * (1 << (st - cur_st)) - (1 << st);
        int RR = LL + (1 << (st - cur_st));
        if (R <= LL || RR <= L)
        {
            return;
        }
        Tree[index].sum += S * (min(RR, R) - max(LL, L));
        if (L <= LL && RR <= R)
        {
            Tree[index].lazy += S; return;
        }
        upd(L, R, S, index * 2, cur_st + 1); upd(L, R, S, index * 2 + 1, cur_st + 1);
    }

    int Get(int L, int R, int S = 0, int index = 1, int cur_st = 0)
    {
        int LL = index * (1 << (st - cur_st)) - (1 << st);
        int RR = LL + (1 << (st - cur_st));
        if (R <= LL || RR <= L)
        {
            return 0;
        }
        if (L <= LL && RR <= R)
        {
            return Tree[index].sum + S * (RR - LL);
        }
        S += Tree[index].lazy;
        return Get(L, R, S, index * 2, cur_st + 1) + Get(L, R, S, index * 2 + 1, cur_st + 1);
    }

    void reset(int n)
    {
        for (int i = 0; i < min(4 * n + 3, 4*N); i++)
        {
            Tree[i] = field();
        }
        st = 0;
        while ((1 << st) < n)
        {
            st++;
        }
    }

    void build(const vector<int>& A)
    {
        for (int i = (1 << st); i < (1 << st) + A.size(); i++)
        {
            Tree[i].sum = A[i - (1 << st)];
        }
        int cur_st = st - 1;
        while (cur_st >= 0)
        {
            for (int i = (1 << cur_st); i < 2 * (1 << cur_st); i++)
            {
                Tree[i].sum = (Tree[i * 2].sum + Tree[2 * i + 1].sum);
            }
            cur_st--;
        }
    }

    void reset_and_build(const vector<int>& A)
    {
        reset(A.size());
        build(A);
    }
};

// 100%
