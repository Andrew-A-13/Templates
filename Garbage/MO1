#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<algorithm>
#include<climits>
#include<cmath>
#include<numeric>
#include<string>
#include<ctime>
#include<stdlib.h>
#include<queue>
#include<bit>
#include<unordered_set>
#include<unordered_map>
#include<random>


using namespace std;

//#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
//#pragma GCC optimize("O3")
//#pragma GCC optimize("unroll-loops")


#define endl '\n'
#define int long long

vector<int> A;

const int K = sqrt(200000);

struct querry {
    int l, r, i;
    bool operator<(querry& other)
    {
        if (l / K != other.l / K)
        {
            return l < other.l;
        }
        if (r != other.r)
            return r < other.r;
        return i < other.i;
    }
};

int l = -1, r = 0;
int ans = 0;
vector<int> C(1e6 + 1, 0);

void add(int i)
{
    i = A[i];
    ans += i * (2 * C[i] + 1);
    C[i]++;
}

void del(int i)
{
    if (i == -1)
        return;
    i = A[i];
    ans += i * (-2 * C[i] + 1);
    C[i]--;
}



void solve()
{
    int n, q; cin >> n >> q;
    A.resize(n);
    for (int i = 0; i < n; i++)
        cin >> A[i];
    vector<querry> Q(q);
    
    for (int i = 0; i < q; i++)
    {
        int l, r;
        cin >> l >> r; l--;
        Q[i] = { l,r,i };
    }
    sort(Q.begin(), Q.end());
    vector<int> Ans(q);
    
    for (int i = 0; i < q; i++)
    {
        while (l > Q[i].l)
        {
            add(l - 1); l--;
        }
        while (r < Q[i].r)
        {
            add(r); r++;
        }
        while (r > Q[i].r)
        {
            del(r-1); r--;
        }
        while (l < Q[i].l)
        {
            del(l); l++;
        }
        
        Ans[Q[i].i] = ans;
    }
    for (auto x : Ans)
    {
        cout << x << endl;
    }

}


signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int t; t = 1;
    for (int u = 0; u < t; u++)
    {
        solve();
    }
    return 0;
}
