#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<algorithm>
#include<climits>
#include<cmath>
#include<numeric>
#include<string>
#include<bit>
#include<ctime>
#include<stdlib.h>
#include<queue>

using namespace std;

//#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
//#pragma GCC optimize("O3")
//#pragma GCC optimize("unroll-loops")


#define endl '\n'
#define int long long

struct SegTree {
	vector<int> tree;
	int st = 0;
	void build(int n)
	{
		while ((1 << st) < n)
			st++;
		tree.resize((1 << st) * 2, 0);
	}
	void Set(int l, int r, int x, int index = 1, int cur_st = 0)
	{
		int LL = index * (1 << (st - cur_st)) - (1 << st);
		int RR = LL + (1 << (st - cur_st));
		if (r <= LL || RR <= l)
			return;
		if (l <= LL && RR <= r)
		{
			tree[index] = x;
			return;
		}
		if (tree[index] != -1)
		{
			tree[2 * index] = tree[2 * index + 1] = tree[index];
		}
		tree[index] = -1;
		Set(l, r, x, index * 2, cur_st + 1); Set(l, r, x, index * 2 + 1, cur_st + 1);
	}

	int Get(int index)
	{
		index += (1 << st);
		int ans = tree[index];
		while (index != 1)
		{
			index /= 2;
			if (tree[index] != -1)
				ans = tree[index];
		}
		return ans;
	}
};

vector<vector<int>> Gr;
vector<int> Size, tin, tout, Base, p;
int t = 0, base = 0;
vector<int> head, Max;

void dfs(int index, int last)
{
	p[index] = last;
	
	
	Size[index] = 1;
	int I = 0;
	for (int i = 0; i < Gr[index].size(); i++)
	{
		int x = Gr[index][i];
		if (x != last)
		{
			dfs(x, index);
			Size[index] += Size[x];
			if (Size[x] > Size[Gr[index][I]])
			{
				I = i;
			}
			
		}
	}
	if (I != 0)
	{
		swap(Gr[index][0], Gr[index][I]);
	}

	
}

void hld(int index, int Head)
{
	tin[index] = t++;
	Base[index] = base++;
	head[index] = Head;
	Max[index] = Base[index];
	if (Gr[index].empty())
	{
		tout[index] = t++;
		return;
	}
	if (Gr[index][0] != p[index])
	{
		hld(Gr[index][0], Head);
		Max[index] = max(Max[index], Max[Gr[index][0]]);
	}
	for (int i = 1; i < Gr[index].size(); i++)
	{
		int x = Gr[index][i];
		if (p[index] != x)
		{
			hld(x, x);
			Max[index] = max(Max[index], Max[x]);
		}
	}
	tout[index] = t++;
}

SegTree T;

void Set1(int v)
{
	int l = Base[v], r = Max[v] + 1;
	T.Set(l, r, 1);
}

void Set0(int v)
{
	int index = v;
	while (index != 0)
	{
		T.Set(Base[head[index]], Base[index] + 1, 0);
		index = p[head[index]];
	}
	T.Set(0, 1, 0);
}

int Get(int v)
{
	return T.Get(Base[v]);
}



void solve()
{
	
	int n; cin >> n;

	Gr.resize(n);
	Size.resize(n);
	tin.resize(n, 0);
	tout.resize(n);
	p.resize(n);
	head.resize(n);
	Base.resize(n);
	Max.resize(n, 0);

	T.build(n);
	int u, v;
	for (int i = 0; i < n - 1; i++)
	{
		cin >> u >> v; u--, v--;
		Gr[u].push_back(v);
		Gr[v].push_back(u);
	}
	dfs(0, 0);
	hld(0, 0);
	int c, q; cin >> q;
	for (int i = 0; i < q; i++)
	{
		cin >> c; cin >> v; v--;
		if (c == 1)
		{
			Set1(v);
			continue;
		}
		if (c == 2)
		{
			Set0(v);
			continue;
		}
		cout << Get(v) << endl;
	}




}

signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int t; t = 1;
	for (int u = 0; u < t; u++)
	{
		solve();
	}





	return 0;
}



