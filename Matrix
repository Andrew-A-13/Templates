int mod = 1e9 + 7;
namespace Matrix {
    struct Matrix {
        int n, m;
        vector<vector<int>> M;
        Matrix(int n, int m)
        {
            this->n = n;
            this->m = m;
            M.resize(n, vector<int>(m, 0));
        }
        //Eденичная матрица
        Matrix(int n)
        {
            this->n = n;
            this->m = n;
            M.resize(n, vector<int>(n, 0));
            for (int i = 0; i < n; i++)
            {
                M[i][i] = 1;
            }
        }
        vector<int>& operator[](int index)
        {
            return M[index];
        }
    };
    //Без проверки на правильность размерностей
    Matrix multiply(Matrix& a, Matrix& b)
    {
        int n = a.n, m = a.m, r = b.m;
        Matrix res(n, r);
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < r; j++)
            {
                for (int k = 0; k < m; k++)
                {
                    res[i][j] += a[i][k] * b[k][j]; res[i][j] %= mod;
                }
            }
        }
        return res;
    }

    //Квадратные матрицы!!!
    Matrix binpow(Matrix& a, int st)
    {
        Matrix res = Matrix(a.n);
        while (st)
        {
            if (st & 1) { res = multiply(res, a); }
            a = multiply(a, a);
            st >>= 1;
        }
        return res;
    }
};
