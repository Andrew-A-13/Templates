int mod = 1e9 + 7;
namespace Matrix {
    struct Matrix {
        int n, m;
        vector<vector<int>> M;
        Matrix() = default;
        Matrix(int n, int m)
        {
            this->n = n;
            this->m = m;
            M.resize(n, vector<int>(m, 0));
        }
        //Eденичная матрица
        Matrix(int n)
        {
            this->n = n;
            this->m = n;
            M.resize(n, vector<int>(n, 0));
            for (int i = 0; i < n; i++)
            {
                M[i][i] = 1;
            }
        }
        vector<int>& operator[](int index)
        {
            return M[index];
        }
    };

    //Без проверки на правильность размерностей
    Matrix multiply(Matrix& a, Matrix& b)
    {
        int n = a.n, m = a.m, r = b.m;
        Matrix res(n, r);
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < r; j++)
            {
                for (int k = 0; k < m; k++)
                {
                    res.M[i][j] += a.M[i][k] * b.M[k][j]; res.M[i][j] %= mod;
                }
            }
        }
        return res;
    }

    //Квадратные матрицы!!!; можно убрать копирование, если возможно
    Matrix binpow(Matrix a, int st)
    {
        if (st == 0)
        {
            return Matrix(a.n);
        }
        Matrix res = Matrix(a.n);
        while (st)
        {
            if (st & 1) { res = multiply(res, a); }
            a = multiply(a, a);
            st >>= 1;
        }
        return res;
    }


    int det(Matrix a) {
        int n = a.n;
        long long res = 1;
        for (int i = 0; i < n; i++) {
            int pivot = -1;
            for (int j = i; j < n; j++) {
                if (a.M[j][i] != 0) { pivot = j; break; }
            }
            if (pivot == -1) return 0;
            if (pivot != i) {
                swap(a.M[pivot], a.M[i]);
                res = (mod - res) % mod;
            }
            long long inv = f(a.M[i][i], mod - 2);
            res = (res * a.M[i][i]) % mod;
            for (int j = i + 1; j < n; j++) {
                long long coeff = (1LL * a.M[j][i] * inv) % mod;
                for (int k = i; k < n; k++) {
                    a.M[j][k] = (a.M[j][k] - coeff * a.M[i][k]) % mod;
                    if (a.M[j][k] < 0) a.M[j][k] += mod;
                }
            }
        }
        return (int)((res % mod + mod) % mod);
    }
    int f(int a, int st = mod - 2)
    {
        int res = 1;
        while (st)
        {
            if (st & 1) { res = (res * a) % mod; }
            a = (a * a) % mod;
            st >>= 1;
        }
        return res;
    }


    Matrix inverse(Matrix a) {
        int n = a.n;
        Matrix res(n);

        for (int i = 0; i < n; i++) {
            int pivot = -1;
            for (int j = i; j < n; j++) {
                if (a.M[j][i] != 0) { pivot = j; break; }
            }
            if (pivot != i) {
                swap(a.M[pivot], a.M[i]);
                swap(res.M[pivot], res.M[i]);
            }
            int inv = f(a.M[i][i], mod - 2);
            for (int j = 0; j < n; j++) {
                a.M[i][j] = (1LL * a.M[i][j] * inv) % mod;
                res.M[i][j] = (1LL * res.M[i][j] * inv) % mod;
            }
            for (int j = 0; j < n; j++) {
                if (j == i) continue;
                if (a.M[j][i] == 0) continue;
                int coeff = a.M[j][i];
                for (int k = 0; k < n; k++) {
                    a.M[j][k] = (a.M[j][k] - 1LL * coeff * a.M[i][k]) % mod;
                    res.M[j][k] = (res.M[j][k] - 1LL * coeff * res.M[i][k]) % mod;
                    if (a.M[j][k] < 0) a.M[j][k] += mod;
                    if (res.M[j][k] < 0) res.M[j][k] += mod;
                }
            }
        }
        return res;
    }
}
