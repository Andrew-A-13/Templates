struct DAWG {
    struct node {
        int link = -1;
        int len = 0;
        map<int, int> next;
        int endpos = 0;
        //int cnt = 0;//число подстрок с соответствующим префиксом
        //int cnt_ex = 0;//число соотв подстрок
    };
    vector<node> tree;
    void build(string& S)
    {
        tree.clear();
        tree.push_back(node());
        int last = 0;
        int w = S.size();
        int j = 0;
        for (auto c : S)
        {
            int cur = tree.size();
            tree.push_back(node());
            tree[cur].len = tree[last].len + 1;
            tree[cur].endpos = j++;
            //tree[cur].cnt = w; w--; tree[cur].cnt_ex = 1;
            int p = last;
            for (; p != -1 && !tree[p].next.contains(c); p = tree[p].link)
            {
                tree[p].next[c] = cur;
            }
            if (p == -1)
            {
                tree[cur].link = 0;
            }
            else
            {
                int q = tree[p].next[c];
                if (tree[q].len == 1 + tree[p].len)
                {
                    tree[cur].link = q;
                }
                else
                {
                    int clone = tree.size();
                    tree.push_back(node());
                    tree[clone].next = tree[q].next;
                    tree[clone].link = tree[q].link;
                    tree[clone].len = tree[p].len + 1;
                    tree[q].link = clone; tree[cur].link = clone;
                    tree[clone].endpos = tree[q].endpos;
                    for (; p != -1 && tree[p].next[c] == q; p = tree[p].link)
                    {
                        tree[p].next[c] = clone;
                    }
                }
            }
            last = cur;
        }
        vector<pair<int, int>> All;
        for (int i = 0; i < tree.size(); i++)
        {
            All.push_back({ tree[i].len,i });
        }sort(all(All));
        /*for (int i = All.size() - 1; i >= 0; i--)
        {
            auto [len, j] = All[i];
            if (tree[j].link != -1)
            {
                tree[tree[j].link].cnt += tree[j].cnt;
                tree[tree[j].link].cnt_ex += tree[j].cnt_ex;
            }
        }*/
    }
    /*int v = 0;
    int count_prefixes(char c)
    {
        if (!tree[v].next.contains(c))return 0;
        return tree[tree[v].next[c]].cnt;
    }
    int count_prefixes()
    {
        return tree[v].cnt;
    }
    int count_exactly(char c)
    {
        if (!tree[v].next.contains(c))return 0;
        return tree[tree[v].next[c]].cnt_ex;
    }
    int count_exactly()
    {
        return tree[v].cnt_ex;
    }*/
 
};
 
struct SuffixTree {
    
    string S;
    struct field {
        int index;
        int l, r;
    };
    vector<map<char, field>> tree;
    vector<int> link;
    vector<int> p;
    vector<int> len;
    // На конце $
    void build(string& S, int sz1)
    {
        reverse(all(S));
        DAWG D; D.build(S);
        reverse(all(S)); this->S = S;
        int n = D.tree.size();
        //vector<vector<int>> Gr(n);
        p.resize(n);
        vector<pair<int, int>> LR(n);
        tree.resize(n); link.resize(n); len.resize(n);
        for (int i = 0; i < n; i++)
        {
            //Gr[D.tree[i].link].push_back(i);
            p[i] = D.tree[i].link; len[i] = D.tree[i].len;
        }
        for (int i = 1; i < n; i++)
        {
            int delta = D.tree[i].len - D.tree[p[i]].len;
            int pos = S.size() - D.tree[i].endpos - 1;
            LR[i] = { pos + D.tree[p[i]].len,pos + D.tree[i].len };
            tree[p[i]][S[LR[i].first]] = { i,LR[i].first,LR[i].second };
        }
        for (int i = 0; i < n; i++)
        {
            for (auto [ch, j] : D.tree[i].next)
            {
                if (D.tree[i].len + 1 == D.tree[j].len)
                {
                    link[j] = i;
                }
            }
        }
        vector<int> order; order.push_back(0);
        int J = 0;
        while (J != order.size())
        {
            for (auto& [ch, f] : tree[order[J]])
            {
                auto [x, l, r] = f;
                order.push_back(x);
            }
            J++;
        }
        cnt.resize(n, 0); leaf_cnt.resize(n, 0);
        reverse(all(order));
        vector<int> leafs;
        vector<bool> E(n, false);
        for (int i = 1; i < n; i++)
        {
            if (tree[i].size() == 0)E[i] = true;
        }
        for (int i = 1; i < n; i++)
        {
            E[link[i]] = false;
        }
        int st = -1;
        for (int i = 1; i < n; i++)if (E[i])
        {
            st = i; break;
        }
        leafs.push_back(st);
        while (leafs.back() != 0)
        {
            leafs.push_back(link[leafs.back()]);
        }
        leafs.pop_back();
        //reverse(all(leafs));
        for (auto x : leafs)
        {
            if (sz1 > 0)
            {
                 leaf_cnt[x] = 1;
            }
            else if (sz1 < 0)
            {
                leaf_cnt[x] = 1e9;
            }sz1--;
        }
        for (auto x : order) if (x != 0)
        {
            leaf_cnt[p[x]] += leaf_cnt[x];
        }
    }
    vector<int> cnt, leaf_cnt;
    string ans;
    void get_ans(int k, int index = 0)
    {
        //if (k == 0)return;
        if (index == 0)k--;
        for (auto& [ch, f] : tree[index])
        {
            auto [v, l, r] = f;
            if (cnt[v] <= k)
            {
                k -= cnt[v]; continue;
            }
            if ((r - l) * leaf_cnt[v] > k)
            {
                for (int s = l; s < r; s++)
                {
                    ans += S[s];
                    if (k < leaf_cnt[v])return;
                    k -= leaf_cnt[v];
                }return;
            }
            k -= (r - l) * leaf_cnt[v];
            for (int s = l; s < r; s++)ans += S[s];
            get_ans(k, v);
            return;
        }
    }
 
    int get_ans()
    {
        int ans = 1e9;
        for (int i = 1; i < tree.size(); i++)
        {
            if (leaf_cnt[i] == 1e9 + 1)
            {
                ans = min(ans, len[p[i]] + 1);
                if (ans == 2)
                {
                    ans = 2;
                }
            }
        }return ans;
    }
 
};
