struct DAWG {
    struct node {
        int link = -1;
        int len = 0;
        map<int, int> next;
        int cnt = 0;//число подстрок с соответствующим префиксом
        int cnt_ex = 0;//число соотв подстрок
    };
    vector<node> tree;
    void build(string& S)
    {
        tree.clear();
        tree.push_back(node());
        int last = 0;
        int w = S.size();
        for (auto c : S)
        {
            int cur = tree.size();
            tree.push_back(node());
            tree[cur].len = tree[last].len + 1;
            tree[cur].cnt = w; w--; tree[cur].cnt_ex = 1;
            int p = last;
            for (; p != -1 && !tree[p].next.contains(c); p = tree[p].link)
            {
                tree[p].next[c] = cur;
            }
            if (p == -1)
            {
                tree[cur].link = 0;
            }
            else
            {
                int q = tree[p].next[c];
                if (tree[q].len == 1 + tree[p].len)
                {
                    tree[cur].link = q;
                }
                else
                {
                    int clone = tree.size();
                    tree.push_back(node());
                    tree[clone].next = tree[q].next;
                    tree[clone].link = tree[q].link;
                    tree[clone].len = tree[p].len + 1;
                    tree[q].link = clone; tree[cur].link = clone;
                    for (; p != -1 && tree[p].next[c]==q; p = tree[p].link)
                    {
                        tree[p].next[c] = clone;
                    }
                }
            }
            last = cur;
        }
        vector<pair<int, int>> All;
        for (int i = 0; i < tree.size(); i++)
        {
            All.push_back({ tree[i].len,i });
        }sort(all(All));
        for (int i = All.size() - 1; i >= 0; i--)
        {
            auto [len, j] = All[i];
            if (tree[j].link != -1)
            {
                tree[tree[j].link].cnt += tree[j].cnt;
                tree[tree[j].link].cnt_ex += tree[j].cnt_ex;
            }
        }
    }
    int v = 0;
    int count_prefixes(char c)
    {
        if (!tree[v].next.contains(c))return 0;
        return tree[tree[v].next[c]].cnt;
    }
    int count_prefixes()
    {
        return tree[v].cnt;
    }
    int count_exactly(char c)
    {
        if (!tree[v].next.contains(c))return 0;
        return tree[tree[v].next[c]].cnt_ex;
    }
    int count_exactly()
    {
        return tree[v].cnt_ex;
    }

};
