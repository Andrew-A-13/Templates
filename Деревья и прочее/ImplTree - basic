struct ImpTree {
	struct node {
		int left = -1, right = -1;
		int l, r;//[l;r) - Границы отрезка
		int sum;
		node(int l,int r,int x)
			:l(l),r(r),sum(x)
		{}
		node(int l, int r)
			:l(l), r(r), sum(0)
		{}
	};
	//root = 0
	vector<node> tree;
	static const int LLL = -1e9, RRR = 1e9+1;
	ImpTree()
	{
		tree.push_back(node(LLL, RRR));
	}
	void add(int pos, int x, int index = 0)
	{
		tree[index].sum += x;
		if (tree[index].l + 1 == tree[index].r)return;
		int mid = (tree[index].l + tree[index].r) / 2;
		if (mid > pos)
		{
			if (tree[index].left == -1)
			{
				tree[index].left = tree.size();
				tree.push_back(node(tree[index].l, mid));
			}
			add(pos, x, tree[index].left);
		}
		else
		{
			if (tree[index].right == -1)
			{
				tree[index].right = tree.size();
				tree.push_back(node(mid, tree[index].r));
			}
			add(pos, x, tree[index].right);
		}
	}
	int get_int_range(int l, int r, int index = 0)
	{
		if (index == -1)return 0;
		int LL = tree[index].l, RR = tree[index].r;
		if (l <= LL && RR <= r)return tree[index].sum;
		if (RR <= l || r <= LL)return 0;
		return get_int_range(l, r, tree[index].left) + get_int_range(l, r, tree[index].right);
	}

};
