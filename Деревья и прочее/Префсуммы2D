struct pref2D {
    vector<vector<int>> p;
    pref2D(vector<vector<int>>& A)
    {
        int n = A.size();
        p.resize(n, vector<int>(n, 0));
        p[0][0] = A[0][0];
        for (int i = 1; i < n; i++)
        {
            p[i][0] = A[i][0] + p[i - 1][0];
            p[0][i] = A[0][i] + p[0][i - 1];
        }
        for (int i = 1; i < n; i++)
        {
            for (int j = 1; j < n; j++)
            {
                p[i][j] = A[i][j] + p[i][j - 1] + p[i - 1][j] - p[i - 1][j - 1];
            }
        }
    }

    int get(int x1, int x2, int y1, int y2)
    {
        return p[x2][y2] + (x1 != 0 && y1 != 0 ? p[x1 - 1][y1 - 1] : 0LL) - (x1 != 0 ? p[x1 - 1][y2] : 0LL) - (y1 != 0 ? p[x2][y1 - 1] : 0LL);
    }

};
