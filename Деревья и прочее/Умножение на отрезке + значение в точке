struct TreeMul {
	vector<int> tree;
	int st = 0;
	void build(const vector<int>& A)
	{
		int n = A.size();
		while ((1 << st) < n)st++;
		tree.resize((1 << st) * 2, 1);
		for (int i = (1 << st); i < (1 << st) + n; i++)
		{
			tree[i] = A[i - (1 << st)];
		}
	}
	void multiply(int l, int r, int x, int index = 1, int cur_st = 0)
	{
		int LL = index * (1 << (st - cur_st)) - (1 << st);
		int RR = LL + (1 << (st - cur_st));
		if (RR <= l || r <= LL)return;
		if (l <= LL && RR <= r)
		{
			tree[index] *= x; tree[index] %= mod; return;
		}
		multiply(l, r, x, index * 2, cur_st + 1); multiply(l, r, x, index * 2 + 1, cur_st + 1);
	}

	int get(int pos, int index = 1, int cur_st = 0)
	{
		if (index >= (1 << st)) return tree[index];
		if (tree[index] != 1)
		{
			tree[2 * index] *= tree[index]; tree[2 * index] %= mod;
			tree[2 * index + 1] *= tree[index]; tree[2 * index + 1] %= mod;
			tree[index] = 1;
		}
		int m = index * (1 << (st - cur_st)) - (1 << st) + (1 << (st - cur_st)) / 2;
		if (pos >= m)return get(pos, index * 2 + 1, cur_st + 1);
		return get(pos, index * 2, cur_st + 1);
	}
};
